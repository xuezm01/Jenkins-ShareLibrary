#!groovy

//jenkinslib 为在jenkins 系统配置  -->  Global Pipeline Libraries 中设置的名称
@Library('jenkinslib') _
def tools = new org.devops.tools()

String workspace = "/opt/jenkins/workspace"
//Pipeline
//https://zeyangli.github.io/chapter5/2/

//调用var下的groovy
hello()

pipeline {
    //agent any
    agent {
        node {
                label "build" //指定运行节点的标签或者名称
                customWorkspace "${workspace}" //指定运行工作目录 (可选)
            }
    }

    //env
    // environment {
    //     CC = 'CC'  //指定一个键值对序列，该序列将被定义为所有步骤的环境变量
    // }

    //为流水线运行时设置项目相关的参数,同在项目中的参数化构建中 设置的效果一样
    //parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }

    // parameters {
    // choice choices: ['1', '2', '3'], description: '', name: 'a'
    // }

    options {
        timestamps() //日志会有时间
        skipDefaultCheckout() //删除隐式checkout s cm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1, unit: 'HOURS') //流水线超时设置1h
    }

    stages {
        //打印环境变量
        // stage('Getenv') {
        //     environment {
        //         AN_ACCESS_KEY = credentials('gitlab-ci-user')  //通过标识符访问预定义的凭证
        //     }
        //     steps {
        //         sh 'printenv'
        //     }
        // }

        //并行
        stage('Parallel Stage') {
            when { environment name: 'DEPLOY_ENV', value: 'testing' }
            failFast true  //添加 failFast true 到包含parallel的 stage中， 当其中一个进程失败时，你可以强制所有的 parallel 阶段都被终止。
            parallel {
                stage('Branch A') {
                    steps {
                        echo "On Branch A"
                    }
                }
                stage('Branch B') {
                    steps {
                        echo "On Branch B"
                    }
                }
            }
        }


        //下载代码
        stage("GetCode"){ //阶段名称
            steps{ //步骤
                timeout(time:5, unit:"MINUTES" ){  //步骤超时时间
                    script{ //填写运行代码
                        println('获取代码')
                        tools.PrintMes("获取代码",'green')
                    }
                }
            }
        }

        //构建
        stage("Test"){
            steps{
                script{
                    println("${DEPLOY_ENV}")  //打印对应的参数, 在项目中的参数化构建中或者parameters定义,注意使用""号调用
                    println('Test')
                }
            }
        }

        //代码扫描
        stage("ScanCode"){
            steps{
                timeout(time:30, unit:"MINUTES" ){
                    script{
                        println('代码扫描')
                    }
                }
            }
        }


    }

    //构建后操作
    post {
        always {
            script{
                println("always" )
                //总是执行
            }
        }

        success {
            script{
                currentBuild.description = "\n 构建成功!"
                //成功后执行
            }
        }

        failure {
            script{
                currentBuild.description = "\n构建失败!"
                //失败后执行
            }
        }

        aborted {
            script{
                currentBuild.description = "\n 构建取消!"
                //取消后执行
            }
        }
    }
}
